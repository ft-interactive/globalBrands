(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.client = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/christopher.campbell/Documents/GitHub/globalBrands/bower_components/o-table/main.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _oTable = require('./src/js/oTable');

var _oTable2 = _interopRequireDefault(_oTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const constructAll = function () {
	_oTable2.default.init();
	document.removeEventListener('o.DOMContentLoaded', constructAll);
}; /*global require, module*/


document.addEventListener('o.DOMContentLoaded', constructAll);

exports.default = _oTable2.default;

},{"./src/js/oTable":"/Users/christopher.campbell/Documents/GitHub/globalBrands/bower_components/o-table/src/js/oTable.js"}],"/Users/christopher.campbell/Documents/GitHub/globalBrands/bower_components/o-table/src/js/oTable.js":[function(require,module,exports){
'use strict';

/**
 * Initialises an o-table components inside the element passed as the first parameter
 *
 * @param {(HTMLElement|string)} [el=document.body] - Element where to search for the o-table component. You can pass an HTMLElement or a selector string
 * @returns {OTable} - A single OTable instance
 */
function OTable(rootEl) {
	if (!rootEl) {
		rootEl = document.body;
	} else if (!(rootEl instanceof HTMLElement)) {
		rootEl = document.querySelector(rootEl);
	}
	if (rootEl.getAttribute('data-o-component') === "o-table") {
		this.rootEl = rootEl;
	} else {
		this.rootEl = rootEl.querySelector('[data-o-component~="o-table"]');
	}

	if (this.rootEl !== undefined) {
		this.listeners = [];
		this.isResponsive = false;
		this.rootEl.setAttribute('data-o-table--js', '');

		this.tableHeaders = Array.from(this.rootEl.querySelectorAll('thead th'));
		const tableRows = Array.from(this.rootEl.getElementsByTagName('tr'));

		this.tableHeaders.forEach((th, columnIndex) => {
			const listener = this._sortByColumn(columnIndex);
			this.listeners.push(listener);
			th.addEventListener('click', listener);
		});

		// "o-table--responsive-flat" configuration only works when there is a
		// `<thead>` block containing the table headers. If there are no headers
		// available, the `responsive-flat` class needs to be removed to prevent
		// headings being hidden.
		if (this.rootEl.getAttribute('data-o-table-responsive') === 'flat' && this.tableHeaders.length > 0) {
			this.isResponsive = true;
		} else {
			this.rootEl.classList.remove('o-table--responsive-flat');
		}

		if (this.isResponsive) {
			this._duplicateHeaders(tableRows, this.tableHeaders);
		}

		this.dispatch('ready', {
			oTable: this
		});
	}
}

/**
 *
 * @private
 * @param  {Number} columnIndex
 */
OTable.prototype._sortByColumn = function _sortByColumn(columnIndex) {
	return function (event) {
		this.tableHeaders.forEach(header => {
			header.setAttribute('aria-sort', 'none');
		});

		if (this.rootEl.getAttribute('data-o-table-order') === null || this.rootEl.getAttribute('data-o-table-order') === "DES") {
			this.rootEl.setAttribute('data-o-table-order', 'ASC');
			event.currentTarget.setAttribute('aria-sort', 'ascending');
		} else {
			this.rootEl.setAttribute('data-o-table-order', 'DES');
			event.currentTarget.setAttribute('aria-sort', 'descending');
		}
		this.sortRowsByColumn(columnIndex, this.rootEl.getAttribute('data-o-table-order') === "ASC", event.currentTarget.getAttribute('data-o-table-data-type') === 'numeric');
	}.bind(this);
};

/**
 * Duplicate the table headers into each row
 * For use with responsive tables
 *
 * @private
 * @param  {array} rows Table rows
 */
OTable.prototype._duplicateHeaders = function _duplicateHeaders(rows, headers) {
	rows.forEach(row => {
		const data = Array.from(row.getElementsByTagName('td'));
		data.forEach((td, dataIndex) => {
			td.parentNode.insertBefore(headers[dataIndex].cloneNode(true), td);
		});
	});
};

/**
 * Helper function to dispatch namespaced events, namespace defaults to oTable
 * @param  {String} event
 * @param  {Object} data={}
 * @param  {String} namespace='oTable'
 */
OTable.prototype.dispatch = function (event, data = {}, namespace = 'oTable') {
	this._timeoutID = setTimeout(() => {
		this.rootEl.dispatchEvent(new CustomEvent(namespace + '.' + event, {
			detail: data,
			bubbles: true
		}));
	}, 0);
};

/**
 * Helper function to remove all event handlers which were added during instantiation of the component
 * @returns {undefined}
 */
OTable.prototype.removeEventListeners = function () {
	const tableHeaders = Array.from(this.rootEl.querySelectorAll('thead th'));

	tableHeaders.forEach((th, columnIndex) => {
		th.removeEventListener('click', this.listeners[columnIndex]);
	});
};

function ascendingSort(a, b) {
	if (a < b) {
		return -1;
	} else if (b < a) {
		return 1;
	} else {
		return 0;
	}
}

function descendingSort(a, b) {
	if (a < b) {
		return 1;
	} else if (b < a) {
		return -1;
	} else {
		return 0;
	}
}

/**
 * Sorts the table by a specific column
 * @param  {number} The index of the column to sort the table by
 * @param  {bool} Which direction to sort in, ascending or descending
 * @param  {bool} Whether the values in this column are numeric, if they are numeric we convert the contents into numbers
 * @returns undefined
 */
OTable.prototype.sortRowsByColumn = function (index, sortAscending, isNumericValue) {
	const rows = Array.from(this.rootEl.querySelectorAll('tbody tr'));
	const tbody = this.rootEl.querySelector('tbody');
	rows.sort(function (a, b) {
		let aCol = a.children[index];
		let bCol = b.children[index];

		if (aCol.getAttribute('data-o-table-order') !== null) {
			aCol = aCol.getAttribute('data-o-table-order');
			bCol = bCol.getAttribute('data-o-table-order');
			if (!isNaN(parseInt(aCol))) {
				aCol = parseInt(aCol);
				bCol = parseInt(bCol);
			}
		} else {
			aCol = aCol.textContent;
			bCol = bCol.textContent;
		}

		if (isNumericValue) {
			aCol = parseFloat(aCol);
			bCol = parseFloat(bCol);
		}

		if (sortAscending) {
			return ascendingSort(aCol, bCol);
		} else {
			return descendingSort(aCol, bCol);
		}
	});

	tbody.innerHTML = '';

	rows.forEach(function (row) {
		tbody.appendChild(row);
	});

	this.dispatch('sorted');
};

/**
 * Destroys the instance, removing any event listeners that were added during instatiation of the component
 * @returns undefined
 */
OTable.prototype.destroy = function () {
	if (this._timeoutID !== undefined) {
		clearTimeout(this._timeoutID);
		this._timeoutID = undefined;
	}
	this.rootEl.removeAttribute('data-o-table--js');
	this.removeEventListeners();
	delete this.rootEl;
};

/**
 * Initialises all o-table components inside the element passed as the first parameter
 *
 * @param {(HTMLElement|string)} [el=document.body] - Element where to search for o-table components. You can pass an HTMLElement or a selector string
 * @returns {Array|OTable} - An array of OTable instances or a single OTable instance
 */
OTable.init = function (el = document.body) {
	if (!(el instanceof HTMLElement)) {
		el = document.querySelector(el);
	}
	if (/\bo-table\b/.test(el.getAttribute('data-o-component'))) {
		return new OTable(el);
	}
	const tableEls = Array.from(el.querySelectorAll('[data-o-component~="o-table"]'));
	return tableEls.map(el => {
		return new OTable(el);
	});
};

OTable.wrap = function wrap(tableSelector, wrapClass) {
	tableSelector = typeof tableSelector === "string" ? tableSelector : ".o-table";
	wrapClass = typeof wrapClass === "string" ? wrapClass : "o-table-wrapper";

	const matchingEls = document.querySelectorAll(tableSelector);
	let wrapEl;

	if (matchingEls.length > 0) {
		wrapEl = document.createElement('div');
		wrapEl.setAttribute("class", wrapClass);

		for (let c = 0, l = matchingEls.length; c < l; c++) {
			const tableEl = matchingEls[c];

			if (!tableEl.parentNode.matches("." + wrapClass)) {
				wrapElement(tableEl, wrapEl.cloneNode(false));
			}
		}
	}
};

function wrapElement(targetEl, wrapEl) {
	const parentEl = targetEl.parentNode;
	parentEl.insertBefore(wrapEl, targetEl);
	wrapEl.appendChild(targetEl);
}

module.exports = OTable;

},{}],"/Users/christopher.campbell/Documents/GitHub/globalBrands/client/index.js":[function(require,module,exports){
'use strict';

document.querySelector('input#tableFilter').onkeyup = function (event) {
  var filter = event.target.value.toUpperCase(); //get the contents of the search box in UPPERCASE
  document.querySelectorAll('#brandsTable tbody tr').forEach(function (row) {
    //for each selected row
    var searchableText = row.textContent.toUpperCase(); //get all the text content in UPPERCASE
    if (searchableText.indexOf(filter) > -1) {
      //if the filter is in the searchableText of the row then carry on displaying the row
      row.style.display = '';
    } else {
      //otherwise hide it
      row.style.display = 'none';
    }
  });
};

var OTable = require("./../bower_components/o-table/main.js");
oTable = new OTable(document.body);

},{"./../bower_components/o-table/main.js":"/Users/christopher.campbell/Documents/GitHub/globalBrands/bower_components/o-table/main.js"}]},{},["/Users/christopher.campbell/Documents/GitHub/globalBrands/client/index.js"])("/Users/christopher.campbell/Documents/GitHub/globalBrands/client/index.js")
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
