{
  "_args": [
    [
      {
        "raw": "inline-source@github:aendrew/inline-source",
        "scope": null,
        "escapedName": "inline-source",
        "name": "inline-source",
        "rawSpec": "github:aendrew/inline-source",
        "spec": "github:aendrew/inline-source",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:aendrew/inline-source.git",
          "sshUrl": "git+ssh://git@github.com/aendrew/inline-source.git",
          "httpsUrl": "git+https://github.com/aendrew/inline-source.git",
          "gitUrl": "git://github.com/aendrew/inline-source.git",
          "shortcut": "github:aendrew/inline-source",
          "directUrl": "https://raw.githubusercontent.com/aendrew/inline-source/master/package.json"
        }
      },
      "/Users/christopher.campbell/Documents/GitHub/globalBrands"
    ]
  ],
  "_from": "aendrew/inline-source",
  "_id": "inline-source@5.0.1",
  "_inCache": true,
  "_location": "/inline-source",
  "_phantomChildren": {
    "argparse": "1.0.9",
    "center-align": "0.1.3",
    "clap": "1.2.0",
    "coa": "1.0.3",
    "colors": "1.1.2",
    "decamelize": "1.2.0",
    "domelementtype": "1.3.0",
    "domhandler": "2.4.1",
    "domutils": "1.6.2",
    "entities": "1.1.1",
    "inherits": "2.0.3",
    "mkdirp": "0.5.1",
    "readable-stream": "2.3.2",
    "right-align": "0.1.3",
    "uglify-to-browserify": "1.0.2",
    "whet.extend": "0.9.9"
  },
  "_requested": {
    "raw": "inline-source@github:aendrew/inline-source",
    "scope": null,
    "escapedName": "inline-source",
    "name": "inline-source",
    "rawSpec": "github:aendrew/inline-source",
    "spec": "github:aendrew/inline-source",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:aendrew/inline-source.git",
      "sshUrl": "git+ssh://git@github.com/aendrew/inline-source.git",
      "httpsUrl": "git+https://github.com/aendrew/inline-source.git",
      "gitUrl": "git://github.com/aendrew/inline-source.git",
      "shortcut": "github:aendrew/inline-source",
      "directUrl": "https://raw.githubusercontent.com/aendrew/inline-source/master/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git://github.com/aendrew/inline-source.git#2babc4566c81ffdd8a964ebc3f0c0966a0f5c1b7",
  "_shasum": "ec09c0c6514614196c66850ee27209fd78e39650",
  "_shrinkwrap": null,
  "_spec": "inline-source@github:aendrew/inline-source",
  "_where": "/Users/christopher.campbell/Documents/GitHub/globalBrands",
  "author": {
    "name": "popeindustries",
    "email": "alex@pope-industries.com"
  },
  "bugs": {
    "url": "https://github.com/popeindustries/inline-source/issues"
  },
  "dependencies": {
    "csso": "2.2.1",
    "htmlparser2": "3.9.1",
    "lodash": "4.15.0",
    "svgo": "0.7.0",
    "uglify-js": "2.7.3"
  },
  "description": "Inline all flagged js, css, image source files",
  "devDependencies": {
    "expect.js": "*",
    "mocha": "*"
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "2babc4566c81ffdd8a964ebc3f0c0966a0f5c1b7",
  "homepage": "https://github.com/popeindustries/inline-source#readme",
  "keywords": [
    "inline",
    "html",
    "js",
    "css",
    "svg"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "inline-source",
  "optionalDependencies": {},
  "readme": "[![NPM Version](https://img.shields.io/npm/v/inline-source.svg?style=flat)](https://npmjs.org/package/inline-source)\n[![Build Status](https://img.shields.io/travis/popeindustries/inline-source.svg?style=flat)](https://travis-ci.org/popeindustries/inline-source)\n\n# inline-source\n\nInline and compress tags that contain the `inline` attribute. Supports `<script>`, `<link>`, and `<img>` (including `*.svg` sources) tags by default, and is easily extensible to handle others.\n\n> You can use [inline-source-cli](https://github.com/developit/inline-source-cli) to run `inline-source` from the command line or NPM Scripts.\n\n## Usage\n\n**inline(htmlpath, [options], callback(err, html))**: asynchronously parse `htmlpath` content for tags containing an `inline` attribute, and replace with (optionally compressed) file contents.\n\n`htmlpath` can be either a filepath *or* a string of html content.\n\nAvailable `options` include:\n- `attribute`: attribute used to parse sources (default `inline`)\n- `compress`: enable/disable compression of inlined content (default `true`)\n- `handlers`: specify custom handlers (default `[]`) [see [custom handlers](#custom-handlers)]\n- `ignore`: disable inlining based on `tag`, `type`, and/or `format` (default `[]`)\n- `pretty`: maintain leading whitespace when `options.compress` is `false` (default `false`)\n- `rootpath`: directory path used for resolving inlineable paths (default `process.cwd()`)\n- `swallowErrors`: enable/disable suppression of errors (default `false`)\n- `svgAsImage`: convert `<img inline src=\"*.svg\" />` to `<img>` and not `<svg>` (default `false`)\n\n```bash\n$ npm install inline-source\n```\n```html\n<!-- located at project/src/html/index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- inline project/www/css/inlineStyle.css as <style> -->\n  <link inline href=\"css/inlineStyle.css\">\n  <!-- inline project/src/js/inlineScript.js as <script> -->\n  <script inline src=\"../js/inlineScript.js\"></script>\n  <!-- inline project/www/images/inlineImage.png as base64 <img> -->\n  <img inline src=\"images/inlineImage.png\" />\n  <!-- inline project/www/images/inlineImage.svg as <svg> -->\n  <img inline src=\"images/inlineImage.svg\" />\n</head>\n</html>\n```\n```javascript\nvar inline = require('inline-source')\n  , fs = require('fs')\n  , path = require('path')\n  , htmlpath = path.resolve('project/src/html/index.html');\n\ninline(htmlpath, {\n  compress: true,\n  rootpath: path.resolve('www'),\n  // Skip all css types and png formats\n  ignore: ['css', 'png']\n}, function (err, html) {\n  // Do something with html\n});\n```\n\n**inline.sync(htmlpath, [options])**: same as `inline`, but synchronously returns string of html content.\n\n```javascript\nvar inline = require('inline-source').sync\n  , fs = require('fs')\n  , path = require('path')\n  , htmlpath = path.resolve('project/src/html/index.html');\n\nvar html = inline(htmlpath, {\n  compress: true,\n  rootpath: path.resolve('www'),\n  // Skip all script tags\n  ignore: 'script'\n});\n```\n\n### Custom Handlers\n\nCustom handlers are simple middleware-type functions that enable you to provide new, or override existing, inlining behaviour. All handlers have the following signature: `function handler (source, context, next) {}`\n\n- `source`: the current source object to act upon\n  - `attributes`: the parsed tag attributes object\n  - `compress`: the compress flag (may be overriden at the tag level via [props](#props))\n  - `content`: the processed `fileContent` string\n  - `extension`: the file extension\n  - `fileContent`: the loaded file content string\n  - `filepath`: the fully qualified path string\n  - `format`: the format string (`jpg`, `gif`, `svg+xml`, etc)\n  - `match`: the matched html tag string, including closing tag if appropriate\n  - `props`: the parsed namespaced attributes object (see [props](#props))\n  - `replace`: the tag wrapped `content` string to replace `match`\n  - `tag`: the tag string (`script`, `link`, etc)\n  - `type`: the content type based on `type` mime-type attribute, or `tag` (`js` for `application/javascript`, `css` for `text/css`, etc)\n\n- `context`: the global context object storing all configuration options (`attribute`, `compress`, `ignore`, `pretty`, `rootpath`, `swallowErrors`, `svgAsImage`), in addtion to:\n  - `html`: the html file's content string\n  - `htmlpath`: the html file's path string\n  - `sources`: the array of `source` objects\n\n- `next(err)`: a function to be called to advance to the next middleware function. Accepts an optional `error` object with behaviour determined by `swallowErrors` flag (stops all processing if `false`, skips current `source` if `true`)\n\nCustom handlers are inserted before the defaults, enabling overriding of default behaviour:\n\n```js\nmodule.exports = function customjs (source, context, next) {\n  if (source.fileContent\n    && !source.content\n    && (source.type == 'js')) {\n      source.content = \"Hey! I'm overriding the file's content!\";\n      next();\n  } else {\n    next();\n  }\n};\n```\n\nIn general, default file content processing will be skipped if `source.content` is already set, and default wrapping of processed content will be skipped if `source.replace` is already set.\n\n### Props\n\nSource `props` are a subset of `attributes` that are namespaced with the current global `attribute` ('inline' by default), and allow declaratively passing data or settings to handlers:\n\n```html\n<script inline inline-foo=\"foo\" inline-compress src=\"../js/inlineScript.js\"></script>\n```\n```js\nmodule.exports = function customjs (source, context, next) {\n  if (source.fileContent\n    && !source.content\n    && (source.type == 'js')) {\n      // The `inline-compress` attribute automatically overrides the global flag\n      if (source.compress) {\n        // compress content\n      }\n      if (source.props.foo == 'foo') {\n        // foo content\n      }\n      next();\n  } else {\n    next();\n  }\n};\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/popeindustries/inline-source.git"
  },
  "scripts": {
    "lint": "eslint lib test",
    "test": "mocha --reporter spec"
  },
  "version": "5.0.1"
}
