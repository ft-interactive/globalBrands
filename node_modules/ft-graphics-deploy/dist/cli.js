'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _meow = require('meow');

var _meow2 = _interopRequireDefault(_meow);

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _parseGithubUrl = require('parse-github-url');

var _parseGithubUrl2 = _interopRequireDefault(_parseGithubUrl);

var _chalk = require('chalk');

var _input = require('input');

var _input2 = _interopRequireDefault(_input);

var _help = require('./help');

var _help2 = _interopRequireDefault(_help);

var _Deployer = require('./Deployer');

var _Deployer2 = _interopRequireDefault(_Deployer);

var _verifyGit = require('./verifyGit');

var _verifyGit2 = _interopRequireDefault(_verifyGit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getURL = (options, urlType) => `http://${options.bucketName}.s3-website-${options.awsRegion}.amazonaws.com/v2${options.preview ? '-preview' : ''}/${options.projectName}/${options[urlType]}/`;

(0, _asyncToGenerator3.default)(function* () {
  // use meow to parse CLI arguments
  const cli = (0, _meow2.default)({ help: _help2.default }, {
    alias: {
      h: 'help'
    }
  });

  // define our defaults - some of which come from environment variables
  const defaults = {
    localDir: 'dist',
    awsKey: process.env.AWS_KEY_PROD,
    awsSecret: process.env.AWS_SECRET_PROD,
    bucketName: process.env.BUCKET_NAME_PROD,
    awsRegion: process.env.AWS_REGION_PROD || 'eu-west-1',
    preview: false
  };

  const options = (0, _extends3.default)({}, defaults, cli.flags);

  // unless provided, magically infer the variables that determine our deploy targets
  if (!options.projectName || !options.sha || !options.branchName) {
    yield (0, _verifyGit2.default)();

    // infer the project name from the GitHub repo name
    if (!options.projectName) {
      const originURL = yield _execa2.default.stdout('git', ['config', '--get', 'remote.origin.url']);

      const { repo, host } = (0, _parseGithubUrl2.default)(originURL);

      if (host !== 'github.com') {
        throw new Error(`Expected git remote "origin" to be a github.com URL, but it was: ${originURL}`);
      }

      options.projectName = repo;
    }

    // use the SHA of the current commit
    if (!options.sha) {
      options.sha = yield _execa2.default.stdout('git', ['rev-parse', '--verify', 'HEAD']);
    }

    // use the name of the branch we're on now
    if (!options.branchName) {
      options.branchName = yield _execa2.default.stdout('git', ['rev-parse', '--abbrev-ref', '--verify', 'HEAD']);
    }
  }

  // validate options
  if (!options.bucketName) throw new Error('bucketName not set');
  if (!options.awsRegion) throw new Error('awsRegion not set');
  if (!options.sha) throw new Error('sha not set');
  if (!options.branchName) throw new Error('branchName not set');

  // handle special --get-branch-url or --get-commit-url use cases
  if (options.getBranchUrl || options.getCommitUrl) {
    process.stdout.write(getURL(options, options.getBranchUrl ? 'branchName' : 'sha'));

    process.exit();
  }

  // report options (except secrets)
  console.log('\nOptions:\n' + `  local dir: ${options.localDir}\n` + `  project name: ${options.projectName}\n` + `  sha: ${options.sha}\n` + `  branch name: ${options.branchName}\n` + `  assets prefix: ${options.assetsPrefix}\n` + `  preview: ${options.preview}`);

  // ask for confirmation
  if (!options.confirm && !(yield _input2.default.confirm('Continue?', { default: false }))) {
    process.exit();
  }

  // construct our deployer
  const deployer = new _Deployer2.default(options);

  // TODO: listen to events and show progress

  // deploy!
  yield deployer.execute();

  // report result
  console.log((0, _chalk.green)('Deployment complete.'));

  if (options.sha) {
    console.log((0, _chalk.cyan)(`  ${getURL(options, 'sha')}`));
  }

  if (options.branchName) {
    console.log((0, _chalk.cyan)(`  ${getURL(options, 'branchName')}`));
  }
})();
//# sourceMappingURL=cli.js.map