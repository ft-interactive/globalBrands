'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const projectRoot = _path2.default.resolve(__dirname, '..');
const cliPath = _path2.default.resolve(projectRoot, 'cli.js');
const fixturePath = _path2.default.resolve(projectRoot, 'fixture');

(0, _ava2.default)('CLI help works', (() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (t) {
    const stdout = yield _execa2.default.stdout(cliPath, ['--help']);

    t.true(/All flags are optional/.test(stdout));
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());

(0, _ava2.default)('CLI deployment works', (() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* (t) {
    const child = (0, _execa2.default)(cliPath, ['--aws-key', process.env.AWS_KEY_DEV, '--aws-secret', process.env.AWS_SECRET_DEV, '--bucket-name', process.env.BUCKET_NAME_DEV, '--aws-region', process.env.AWS_REGION_DEV, '--project-name', 'ft-graphics-deploy/test-fixture', '--branch-name', 'master', '--sha', 'abcdefghijklmnop12345', '--assets-prefix', 'http://example.com/assets/', '--confirm'], {
      cwd: fixturePath,
      stdio: 'inherit'
    });

    try {
      yield child;
    } catch (error) {
      // do not print the error message, as it may contain secrets
      t.fail('Command exited with non-zero code');
      return;
    }

    // check both targets got deployed
    yield _promise2.default.all(['master', 'abcdefghijklmnop12345'].map((() => {
      var _ref3 = (0, _asyncToGenerator3.default)(function* (ref) {
        const htmlRes = yield (0, _nodeFetch2.default)(`http://${process.env.BUCKET_NAME_DEV}.s3-website-eu-west-1.amazonaws.com/v2/ft-graphics-deploy/test-fixture/${ref}/`);
        t.true(htmlRes.ok);
        t.true(/it works/.test((yield htmlRes.text())));

        const revManifestRes = yield (0, _nodeFetch2.default)(`http://${process.env.BUCKET_NAME_DEV}.s3-website-eu-west-1.amazonaws.com/v2/ft-graphics-deploy/test-fixture/${ref}/rev-manifest.json`);
        t.true(revManifestRes.ok);

        t.deepEqual((yield revManifestRes.json()), {
          'foo.js': 'http://example.com/assets/foo.abc123.js'
        });
      });

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    })()));
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
})());

(0, _ava2.default)('CLI preview deployment works', (() => {
  var _ref4 = (0, _asyncToGenerator3.default)(function* (t) {
    const child = (0, _execa2.default)(cliPath, ['--aws-key', process.env.AWS_KEY_DEV, '--aws-secret', process.env.AWS_SECRET_DEV, '--bucket-name', process.env.BUCKET_NAME_DEV, '--aws-region', process.env.AWS_REGION_DEV, '--project-name', 'ft-graphics-deploy/test-fixture', '--branch-name', 'master', '--sha', 'abcdefghijklmnop12345', '--assets-prefix', 'http://example.com/assets/', '--preview', '--confirm'], {
      cwd: fixturePath,
      stdio: 'inherit'
    });

    try {
      yield child;
    } catch (error) {
      // do not print the error message, as it may contain secrets
      t.fail('Command exited with non-zero code');
      return;
    }

    // check both targets got deployed
    yield _promise2.default.all(['master', 'abcdefghijklmnop12345'].map((() => {
      var _ref5 = (0, _asyncToGenerator3.default)(function* (ref) {
        const htmlRes = yield (0, _nodeFetch2.default)(`http://${process.env.BUCKET_NAME_DEV}.s3-website-eu-west-1.amazonaws.com/v2-preview/ft-graphics-deploy/test-fixture/${ref}/`);
        t.true(htmlRes.ok);
        t.true(/it works/.test((yield htmlRes.text())));

        const revManifestRes = yield (0, _nodeFetch2.default)(`http://${process.env.BUCKET_NAME_DEV}.s3-website-eu-west-1.amazonaws.com/v2-preview/ft-graphics-deploy/test-fixture/${ref}/rev-manifest.json`);
        t.true(revManifestRes.ok);

        t.deepEqual((yield revManifestRes.json()), {
          'foo.js': 'http://example.com/assets/foo.abc123.js'
        });
      });

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    })()));
  });

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
})());

(0, _ava2.default)('Can get the branch URL', (() => {
  var _ref6 = (0, _asyncToGenerator3.default)(function* (t) {
    const child = (0, _execa2.default)(cliPath, ['--aws-key', process.env.AWS_KEY_DEV, '--aws-secret', process.env.AWS_SECRET_DEV, '--bucket-name', process.env.BUCKET_NAME_DEV, '--aws-region', process.env.AWS_REGION_DEV, '--project-name', 'ft-graphics-deploy/test-fixture', '--branch-name', 'master', '--sha', 'abcdefghijklmnop12345', '--assets-prefix', 'http://example.com/assets/', '--get-branch-url'], { cwd: fixturePath });

    try {
      yield child;
    } catch (error) {
      // do not print the error message, as it may contain secrets
      t.fail('Command exited with non-zero code');
      return;
    }

    const { stdout } = yield child;

    t.is(stdout, `http://${process.env.BUCKET_NAME_DEV}.s3-website-${process.env.AWS_REGION_DEV}.amazonaws.com/v2/ft-graphics-deploy/test-fixture/master/`);
  });

  return function (_x6) {
    return _ref6.apply(this, arguments);
  };
})());

(0, _ava2.default)('Can get the commit URL', (() => {
  var _ref7 = (0, _asyncToGenerator3.default)(function* (t) {
    const child = (0, _execa2.default)(cliPath, ['--aws-key', process.env.AWS_KEY_DEV, '--aws-secret', process.env.AWS_SECRET_DEV, '--bucket-name', process.env.BUCKET_NAME_DEV, '--aws-region', process.env.AWS_REGION_DEV, '--project-name', 'ft-graphics-deploy/test-fixture', '--branch-name', 'master', '--sha', 'abcdefghijklmnop12345', '--assets-prefix', 'http://example.com/assets/', '--get-commit-url'], { cwd: fixturePath });

    try {
      yield child;
    } catch (error) {
      // do not print the error message, as it may contain secrets
      t.fail('Command exited with non-zero code');
      return;
    }

    const { stdout } = yield child;

    t.is(stdout, `http://${process.env.BUCKET_NAME_DEV}.s3-website-${process.env.AWS_REGION_DEV}.amazonaws.com/v2/ft-graphics-deploy/test-fixture/abcdefghijklmnop12345/`);
  });

  return function (_x7) {
    return _ref7.apply(this, arguments);
  };
})());
//# sourceMappingURL=cli.test.js.map