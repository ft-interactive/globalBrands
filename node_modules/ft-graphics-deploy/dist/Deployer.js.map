{"version":3,"sources":["../src/Deployer.js"],"names":["REV_MANIFEST_FILENAME","Deployer","constructor","options","execute","localDir","bucketName","projectName","awsKey","awsSecret","awsRegion","sha","branchName","preview","assetsPrefix","revManifest","JSON","parse","readFileSync","resolve","error","code","undefined","revManifestTmpPath","Error","tmpFileDetails","file","path","modifiedRevManifest","forEach","key","writeSync","fd","revvedFiles","client","createClient","s3Options","accessKeyId","secretAccessKey","region","uploadedAssets","reject","uploader","uploadDir","s3Params","Bucket","Prefix","ACL","getS3Params","localFile","stat","callback","relativeLocalFile","relative","indexOf","fileParams","CacheControl","on","emit","what","targets","push","uploadedBundles","all","map","deleteRemoved","target","extname","ContentType","manifestUploader","uploadFile","Key"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAsBA,MAAMA,wBAAwB,mBAA9B;;AAEe,MAAMC,QAAN,0BAAoC;;AAGjDC,cAAYC,OAAZ,EAAsC;AACpC;AACA,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEKC,SAAN,GAAgB;AAAA;;AAAA;AACd,YAAM;AACJC,gBADI;AAEJC,kBAFI;AAGJC,mBAHI;AAIJC,cAJI;AAKJC,iBALI;AAMJC,iBANI;AAOJC,WAPI;AAQJC,kBARI;AASJC,eATI;AAUJC;AAVI,UAWF,MAAKX,OAXT;;AAaA;AACA,YAAMY,cAA6B,YAAM;AACvC,YAAI;AACF,iBAAOC,KAAKC,KAAL,CAAW,aAAGC,YAAH,CAAgB,eAAKC,OAAL,CAAad,QAAb,EAAuBL,qBAAvB,CAAhB,EAA+D,MAA/D,CAAX,CAAP;AACD,SAFD,CAEE,OAAOoB,KAAP,EAAc;AACd,cAAIA,MAAMC,IAAN,KAAe,QAAnB,EAA6B,OAAOC,SAAP;AAC7B,gBAAMF,KAAN;AACD;AACF,OAPiC,EAAlC;;AASA;AACA,UAAIG,kBAAJ;AACA,UAAIR,WAAJ,EAAiB;AACf,YAAI,OAAOD,YAAP,KAAwB,QAA5B,EAAsC;AACpC,gBAAM,IAAIU,KAAJ,CAAU,kEAAV,CAAN;AACD;;AAED,cAAMC,iBAGF,MAAM,qBAAIC,IAAJ,EAHV;;AAKAH,6BAAqBE,eAAeE,IAApC;;AAEA,cAAMC,sBAAmC,EAAzC;AACA,4BAAYb,WAAZ,EAAyBc,OAAzB,CAAiC,UAACC,GAAD,EAAS;AACxCF,8BAAoBE,GAApB,IAA4B,GAAEhB,YAAa,GAAEC,YAAYe,GAAZ,CAAiB,EAA9D;AACD,SAFD;;AAIA;AACA,qBAAGC,SAAH,CAAaN,eAAeO,EAA5B,EAAgC,yBAAeJ,mBAAf,CAAhC;AACD;;AAED,YAAMK,cAAclB,eAAe,sBAAcA,WAAd,CAAnC;;AAEA;AACA,YAAMmB,SAAS,YAAGC,YAAH,CAAgB;AAC7BC,mBAAW;AACTC,uBAAa7B,MADJ;AAET8B,2BAAiB7B,SAFR;AAGT8B,kBAAQ7B;AAHC;AADkB,OAAhB,CAAf;;AAQA;AACA,YAAM8B,iBAAiB,sBAAY,UAACrB,OAAD,EAAUsB,MAAV,EAAqB;AACtD,YAAI,CAACR,WAAL,EAAkB;AAChBd;AACA;AACD;;AAED,cAAMuB,WAAWR,OAAOS,SAAP,CAAiB;AAChCtC,kBADgC;;AAGhCuC,oBAAU;AACRC,oBAAQvC,UADA;AAERwC,oBAAS,eAAcvC,WAAY,GAF3B;AAGRwC,iBAAK;AAHG,WAHsB;;AAShCC,uBAAa,UAACC,SAAD,EAAYC,IAAZ,EAAkBC,QAAlB,EAA+B;AAC1C,kBAAMC,oBAAoB,eAAKC,QAAL,CAAchD,QAAd,EAAwB,eAAKc,OAAL,CAAa8B,SAAb,CAAxB,CAA1B;;AAEA;AACA,gBAAIhB,YAAYqB,OAAZ,CAAoBF,iBAApB,MAA2C,CAAC,CAAhD,EAAmD;AACjDD,uBAAS,IAAT,EAAe,IAAf;AACA;AACD;;AAED,kBAAMI,aAAa,EAAnB;;AAEA;AACAA,uBAAWC,YAAX,GAA0B,8BAA1B;;AAEAL,qBAAS,IAAT,EAAeI,UAAf;AACD;AAxB+B,SAAjB,CAAjB;;AA2BAb,iBAASe,EAAT,CAAY,OAAZ,EAAqB,UAACrC,KAAD,EAAW;AAC9B,gBAAKsC,IAAL,CAAU,OAAV,EAAmBtC,KAAnB;AACAqB,iBAAOrB,KAAP;AACD,SAHD;;AAKAsB,iBAASe,EAAT,CAAY,KAAZ,EAAmB,YAAM;AACvB,gBAAKC,IAAL,CAAU,UAAV,EAAsB;AACpBC,kBAAM;AADc,WAAtB;AAGAxC;AACD,SALD;AAMD,OA5CsB,CAAvB;;AA8CA,YAAMyC,UAAU,EAAhB;AACA,UAAIjD,GAAJ,EAASiD,QAAQC,IAAR,CAAalD,GAAb;AACT,UAAIC,UAAJ,EAAgBgD,QAAQC,IAAR,CAAajD,UAAb;;AAEhB,YAAMkD,kBAAkB,kBAAQC,GAAR,CAAYH,QAAQI,GAAR,CAAY;AAAA,eAAU,sBAAY,UAAC7C,OAAD,EAAUsB,MAAV,EAAqB;AACzF,gBAAMC,WAAWR,OAAOS,SAAP,CAAiB;AAChCtC,oBADgC;;AAGhC4D,2BAAe,IAHiB;;AAKhCrB,sBAAU;AACRC,sBAAQvC,UADA;AAERwC,sBAAS,KAAIjC,UAAU,UAAV,GAAuB,EAAG,IAAGN,WAAY,IAAG2D,MAAO,GAFxD;AAGRnB,mBAAK;AAHG,aALsB;;AAWhCC,yBAAa,UAACC,SAAD,EAAYC,IAAZ,EAAkBC,QAAlB,EAA+B;AAC1C,oBAAMC,oBAAoB,eAAKC,QAAL,CAAchD,QAAd,EAAwB,eAAKc,OAAL,CAAa8B,SAAb,CAAxB,CAA1B;;AAEA,kBAAIG,sBAAsBpD,qBAA1B,EAAiD;AAC/CmD,yBAAS,IAAT,EAAe,IAAf;AACD;;AAED,oBAAMI,aAAa,EAAnB;;AAEA;AACAA,yBAAWC,YAAX,GAA0B,YAA1B;;AAEA;AACA,kBAAI,eAAKW,OAAL,CAAaf,iBAAb,MAAoC,EAAxC,EAA4CG,WAAWa,WAAX,GAAyB,WAAzB;;AAE5CjB,uBAAS,IAAT,EAAeI,UAAf;AACD;AA3B+B,WAAjB,CAAjB;;AA8BAb,mBAASe,EAAT,CAAY,OAAZ,EAAqB,UAACrC,KAAD,EAAW;AAC9B,kBAAKsC,IAAL,CAAU,OAAV,EAAmBtC,KAAnB;AACAqB,mBAAOrB,KAAP;AACD,WAHD;;AAKAsB,mBAASe,EAAT,CAAY,KAAZ,EAAmB,YAAM;AACvB,kBAAKC,IAAL,CAAU,UAAV,EAAsB;AACpBC,oBAAO,GAAEO,MAAO;AADI,aAAtB;;AAIA;AACA,gBAAInD,WAAJ,EAAiB;AACf,oBAAMsD,mBAAmBnC,OAAOoC,UAAP,CAAkB;AACzCrB,2BAAW1B,kBAD8B;;AAGzCqB,0BAAU;AACRC,0BAAQvC,UADA;AAERyC,uBAAK,aAFG;AAGRwB,uBAAM,KAAI1D,UAAU,UAAV,GAAuB,EAAG,IAAGN,WAAY,IAAG2D,MAAO,IAAGlE,qBAAsB;AAH9E;AAH+B,eAAlB,CAAzB;;AAUA0C,uBAASe,EAAT,CAAY,OAAZ,EAAqB,UAACrC,KAAD,EAAW;AAC9B,sBAAKsC,IAAL,CAAU,OAAV,EAAmBtC,KAAnB;AACAqB,uBAAOrB,KAAP;AACD,eAHD;;AAKAiD,+BAAiBZ,EAAjB,CAAoB,KAApB,EAA2B,YAAM;AAC/B,sBAAKC,IAAL,CAAU,UAAV,EAAsB;AACpBC,wBAAO,GAAEO,MAAO;AADI,iBAAtB;;AAIA/C;AACD,eAND;AAOD,aAvBD,MAuBOA;AACR,WA9BD;AA+BD,SAnEyD,CAAV;AAAA,OAAZ,CAAZ,CAAxB;;AAqEA,YAAM,kBAAQ4C,GAAR,CAAY,CAACvB,cAAD,EAAiBsB,eAAjB,CAAZ,CAAN;AAlLc;AAmLf;AA3LgD;kBAA9B7D,Q","file":"Deployer.js","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport fs from 'fs';\nimport path from 'path';\nimport s3 from 's3';\nimport tmp from 'tmp-promise';\n\ntype DeployerOptions = {\n  localDir: string,\n  awsKey: string,\n  awsSecret: string,\n  awsRegion: string,\n  bucketName: string,\n\n  projectName: string,\n  sha?: string,\n  branchName?: string,\n\n  preview: boolean,\n\n  assetsPrefix?: string, // e.g. \"https://example.com/v2/__assets/\"\n};\n\ntype RevManifest = {\n  [string]: string,\n};\n\nconst REV_MANIFEST_FILENAME = 'rev-manifest.json';\n\nexport default class Deployer extends EventEmitter {\n  options: DeployerOptions;\n\n  constructor(options: DeployerOptions) {\n    super();\n    this.options = options;\n  }\n\n  async execute() {\n    const {\n      localDir,\n      bucketName,\n      projectName,\n      awsKey,\n      awsSecret,\n      awsRegion,\n      sha,\n      branchName,\n      preview,\n      assetsPrefix,\n    } = this.options;\n\n    // load in the rev-manifest\n    const revManifest: ?RevManifest = (() => {\n      try {\n        return JSON.parse(fs.readFileSync(path.resolve(localDir, REV_MANIFEST_FILENAME), 'utf8'));\n      } catch (error) {\n        if (error.code === 'ENOENT') return undefined;\n        throw error;\n      }\n    })();\n\n    // save an altered version of the rev manifest, if any\n    let revManifestTmpPath: string;\n    if (revManifest) {\n      if (typeof assetsPrefix !== 'string') {\n        throw new Error('Expected assetsPrefix to be defined if revManifest is being used');\n      }\n\n      const tmpFileDetails: {\n        fd: mixed, // file descriptor\n        path: string,\n      } = await tmp.file();\n\n      revManifestTmpPath = tmpFileDetails.path;\n\n      const modifiedRevManifest: RevManifest = {};\n      Object.keys(revManifest).forEach((key) => {\n        modifiedRevManifest[key] = `${assetsPrefix}${revManifest[key]}`;\n      });\n\n      // $FlowFixMe\n      fs.writeSync(tmpFileDetails.fd, JSON.stringify(modifiedRevManifest));\n    }\n\n    const revvedFiles = revManifest && Object.values(revManifest);\n\n    // make an S3 client instance\n    const client = s3.createClient({\n      s3Options: {\n        accessKeyId: awsKey,\n        secretAccessKey: awsSecret,\n        region: awsRegion,\n      },\n    });\n\n    // upload assets to a special place\n    const uploadedAssets = new Promise((resolve, reject) => {\n      if (!revvedFiles) {\n        resolve();\n        return;\n      }\n\n      const uploader = client.uploadDir({\n        localDir,\n\n        s3Params: {\n          Bucket: bucketName,\n          Prefix: `v2/__assets/${projectName}/`,\n          ACL: 'public-read',\n        },\n\n        getS3Params: (localFile, stat, callback) => {\n          const relativeLocalFile = path.relative(localDir, path.resolve(localFile));\n\n          // skip this file if it's not in the rev manifest\n          if (revvedFiles.indexOf(relativeLocalFile) === -1) {\n            callback(null, null);\n            return;\n          }\n\n          const fileParams = {};\n\n          // set long-term cache headers, as it's a revved asset\n          fileParams.CacheControl = 'max-age=365000000, immutable';\n\n          callback(null, fileParams);\n        },\n      });\n\n      uploader.on('error', (error) => {\n        this.emit('error', error);\n        reject(error);\n      });\n\n      uploader.on('end', () => {\n        this.emit('uploaded', {\n          what: 'assets',\n        });\n        resolve();\n      });\n    });\n\n    const targets = [];\n    if (sha) targets.push(sha);\n    if (branchName) targets.push(branchName);\n\n    const uploadedBundles = Promise.all(targets.map(target => new Promise((resolve, reject) => {\n      const uploader = client.uploadDir({\n        localDir,\n\n        deleteRemoved: true,\n\n        s3Params: {\n          Bucket: bucketName,\n          Prefix: `v2${preview ? '-preview' : ''}/${projectName}/${target}/`,\n          ACL: 'public-read',\n        },\n\n        getS3Params: (localFile, stat, callback) => {\n          const relativeLocalFile = path.relative(localDir, path.resolve(localFile));\n\n          if (relativeLocalFile === REV_MANIFEST_FILENAME) {\n            callback(null, null);\n          }\n\n          const fileParams = {};\n\n          // set long-term cache headers, as it's a revved asset\n          fileParams.CacheControl = 'max-age=60';\n\n          // use text/html for extensionless files (similar to gh-pages)\n          if (path.extname(relativeLocalFile) === '') fileParams.ContentType = 'text/html';\n\n          callback(null, fileParams);\n        },\n      });\n\n      uploader.on('error', (error) => {\n        this.emit('error', error);\n        reject(error);\n      });\n\n      uploader.on('end', () => {\n        this.emit('uploaded', {\n          what: `${target} (bundle)`,\n        });\n\n        // finally, upload the modifed rev manifest\n        if (revManifest) {\n          const manifestUploader = client.uploadFile({\n            localFile: revManifestTmpPath,\n\n            s3Params: {\n              Bucket: bucketName,\n              ACL: 'public-read',\n              Key: `v2${preview ? '-preview' : ''}/${projectName}/${target}/${REV_MANIFEST_FILENAME}`,\n            },\n          });\n\n          uploader.on('error', (error) => {\n            this.emit('error', error);\n            reject(error);\n          });\n\n          manifestUploader.on('end', () => {\n            this.emit('uploaded', {\n              what: `${target} (modified rev-manifest)`,\n            });\n\n            resolve();\n          });\n        } else resolve();\n      });\n    })));\n\n    await Promise.all([uploadedAssets, uploadedBundles]);\n  }\n}\n"]}