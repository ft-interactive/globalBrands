{"version":3,"sources":["../src/cli.js"],"names":["getURL","options","urlType","bucketName","awsRegion","preview","projectName","cli","help","alias","h","defaults","localDir","awsKey","process","env","AWS_KEY_PROD","awsSecret","AWS_SECRET_PROD","BUCKET_NAME_PROD","AWS_REGION_PROD","flags","sha","branchName","originURL","stdout","repo","host","Error","getBranchUrl","getCommitUrl","write","exit","console","log","assetsPrefix","confirm","default","deployer","execute"],"mappings":"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","file":"cli.js","sourcesContent":["// @flow\n\nimport meow from 'meow';\nimport execa from 'execa';\nimport parseGitHubURL from 'parse-github-url';\nimport { cyan, green } from 'chalk';\nimport input from 'input';\nimport help from './help';\nimport Deployer from './Deployer';\nimport verifyGit from './verifyGit';\n\nconst getURL = (options, urlType: 'sha' | 'branchName') => (\n  `http://${options.bucketName}.s3-website-${options.awsRegion}.amazonaws.com/v2${\n    options.preview ? '-preview' : ''\n  }/${options.projectName}/${options[urlType]}/`\n);\n\n(async () => {\n  // use meow to parse CLI arguments\n  const cli = meow({ help }, {\n    alias: {\n      h: 'help',\n    },\n  });\n\n  // define our defaults - some of which come from environment variables\n  const defaults = {\n    localDir: 'dist',\n    awsKey: process.env.AWS_KEY_PROD,\n    awsSecret: process.env.AWS_SECRET_PROD,\n    bucketName: process.env.BUCKET_NAME_PROD,\n    awsRegion: process.env.AWS_REGION_PROD || 'eu-west-1',\n    preview: false,\n  };\n\n  const options = { ...defaults, ...cli.flags };\n\n  // unless provided, magically infer the variables that determine our deploy targets\n  if (!options.projectName || !options.sha || !options.branchName) {\n    await verifyGit();\n\n    // infer the project name from the GitHub repo name\n    if (!options.projectName) {\n      const originURL = await execa.stdout('git', ['config', '--get', 'remote.origin.url']);\n\n      const { repo, host } = parseGitHubURL(originURL);\n\n      if (host !== 'github.com') {\n        throw new Error(\n          `Expected git remote \"origin\" to be a github.com URL, but it was: ${originURL}`,\n        );\n      }\n\n      options.projectName = repo;\n    }\n\n    // use the SHA of the current commit\n    if (!options.sha) {\n      options.sha = await execa.stdout('git', ['rev-parse', '--verify', 'HEAD']);\n    }\n\n    // use the name of the branch we're on now\n    if (!options.branchName) {\n      options.branchName = await execa.stdout('git', ['rev-parse', '--abbrev-ref', '--verify', 'HEAD']);\n    }\n  }\n\n  // validate options\n  if (!options.bucketName) throw new Error('bucketName not set');\n  if (!options.awsRegion) throw new Error('awsRegion not set');\n  if (!options.sha) throw new Error('sha not set');\n  if (!options.branchName) throw new Error('branchName not set');\n\n  // handle special --get-branch-url or --get-commit-url use cases\n  if (options.getBranchUrl || options.getCommitUrl) {\n    process.stdout.write(getURL(options, options.getBranchUrl ? 'branchName' : 'sha'));\n\n    process.exit();\n  }\n\n  // report options (except secrets)\n  console.log(\n    '\\nOptions:\\n' +\n    `  local dir: ${options.localDir}\\n` +\n    `  project name: ${options.projectName}\\n` +\n    `  sha: ${options.sha}\\n` +\n    `  branch name: ${options.branchName}\\n` +\n    `  assets prefix: ${options.assetsPrefix}\\n` +\n    `  preview: ${options.preview}`,\n  );\n\n  // ask for confirmation\n  if (!options.confirm && !(await input.confirm('Continue?', { default: false }))) {\n    process.exit();\n  }\n\n  // construct our deployer\n  const deployer = new Deployer(options);\n\n  // TODO: listen to events and show progress\n\n  // deploy!\n  await deployer.execute();\n\n  // report result\n  console.log(green('Deployment complete.'));\n\n  if (options.sha) {\n    console.log(cyan(`  ${getURL(options, 'sha')}`));\n  }\n\n  if (options.branchName) {\n    console.log(cyan(`  ${getURL(options, 'branchName')}`));\n  }\n})();\n"]}